#! /bin/sh
### BEGIN INIT INFO
# Provides:          metashell
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Metashell daemon
# Description:       Daemon for publishing a Metashell
### END INIT INFO

# Author: Abel Sinkovics <abel@sinkovics.hu>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Metashell daemon"
NAME="metashell"
DAEMON=/usr/bin/shellinaboxd
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

LOGFILE=/var/tmp/${NAME}

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# Set some default values
METASHELL_PORT="${METASHELL_PORT:-4202}"
METASHELL_USER="${METASHELL_USER:-nobody}"
METASHELL_GROUP="${METASHELL_GROUP:-nogroup}"

#
# Function that starts the daemon/service
#
do_start()
{
  start-stop-daemon --start --oknodo --pidfile "$PIDFILE" --exec "$DAEMON" -- --disable-ssl --no-beep -p "${METASHELL_PORT}" -u "${METASHELL_USER}" -g "${METASHELL_GROUP}" --css "/usr/share/solarized.css" -s "/:${METASHELL_USER}:${METASHELL_GROUP}:/:/usr/bin/cmpshelld -s /usr/local/share/shell_demo/bin/metashell -i /usr/local/share/shell_demo/include/headers -l ${LOGFILE} -p \${peer} -u \${url}" --background="${PIDFILE}" \
    || return 1
}

#
# Function that stops the daemon/service
#
do_stop()
{
  start-stop-daemon --stop --oknodo --pidfile "$PIDFILE"
  rm -f "$PIDFILE"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  # Only reload if there are no active sessions running
  [ -r "$PIDFILE" ] &&
    [ `ps o pid= --ppid "\`cat "$PIDFILE"\`\`ps o pid= --ppid \\\`cat "$PIDFILE"\\\` | xargs -r -n 1 printf ',%s'\`" | wc -l` gt 1 ] &&
    return 1
	
  do_stop
  do_start
}

#
# Function that check the status of the daemon/service
#
do_status()
{
  [ -r "$PIDFILE" ] && kill -0 `cat "$PIDFILE"` &&
    echo "$DESC is running" || echo "$DESC is not running"
}


case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  restart|force-reload)
    [ "$VERBOSE" != no ] && log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
          1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
          *) [ "$VERBOSE" != no ] && log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        [ "$VERBOSE" != no ] && log_end_msg 1
        ;;
    esac
    ;;
  status)
    do_status
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload|status}" >&2
    exit 3
    ;;
esac

exit 0
