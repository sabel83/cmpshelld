#!/usr/bin/python
"""
C++ metaprogramming shell launcher

This utility starts the shell in CGI-mode.

Supported options:

 -e, --extra <arg>      Pass extra argument to the shell (after --)
 -h, --help             Display this help message
 -i, --includes <path>  The root of the header collection (default: /usr/include/headers)
 -s, --shell <path>     Path of the shell binary
 -l, --log <path>       Log into that file
 -p, --peer <name>      Name of remote peer
 -u, --url <url>        The URL with the GET parameters
                        Accepted GET parameters:
                          _std=c++0x|c++11|c++1y
                          <library name>_version=<version>
"""

import sys
import getopt
import urlparse
import os
import resource
import time
import fcntl
import json
import datetime
import tempfile
import shutil
import subprocess

class TempDir:
  def __enter__(self):
    self.path = tempfile.mkdtemp()
    return self

  def __exit__(self, type, value, traceback):
    shutil.rmtree(self.path)


def append_to_file(filename, s):
  f = open(filename, 'a')
  fcntl.flock(f, fcntl.LOCK_EX)
  try:
    f.write(s)
  finally:
    fcntl.flock(f, fcntl.LOCK_UN)
  f.close()

def log(filename, msg):
  if filename != '':
    suffix = datetime.datetime.now().strftime("_%Y_%m_%d")
    msg['timestamp'] = time.time()
    append_to_file(filename + suffix, json.dumps(msg) + '\n')

def allowed_version_char(c):
  return c.isalnum() or c in ['.', '_']

def valid_version(s):
  return \
    all([allowed_version_char(c) for c in s]) \
    and any([c.isalnum() for c in s])

def valid_standard(s):
  return s in ['c++0x', 'c++11', 'c++1y']

def lib_exists(includes, s):
  return os.path.isdir('%s/%s' % (includes, s))

def limit_memory(mb):
  b = mb * 1024 * 1024
  resource.setrlimit(resource.RLIMIT_AS, (b, b))

def main():
  try:
    opts, args = getopt.getopt(
      sys.argv[1:],
      'hs:i:u:l:p:e:',
      ['help', 'shell=', 'includes=', 'url=', 'log=', 'peer=', 'extra=']
    )
  except getopt.error, msg:
    print msg
    print "Getting help: --help"
    sys.exit(1)
  
  binary = ''
  includes = '/usr/include/headers'
  lib_versions = {}
  std = ''
  logfile = ''
  peer = ''
  url = ''
  extra_args = []

  for o, a in opts:
    if o in ('-h', '--help'):
      print __doc__
      sys.exit(0)
    elif o in ('-l', '--log'):
      logfile = a
    elif o in ('-p', '--peer'):
      peer = a
    elif o in ('-s', '--shell'):
      binary = a
    elif o in ('-i', '--includes'):
      includes = a
    elif o in ('-u', '--url'):
      url = a
      errors = []
      for name, value in urlparse.parse_qsl(urlparse.urlparse(a).query):
        if name.endswith('_version'):
          lib_name = name[:len(name) - len('_version')]
          if valid_version(lib_name):
            if valid_version(value):
              lib_versions[lib_name] = value
            else:
              errors.append('Invalid %s version: %s' % (lib_name, value))
            boost_version = value
          else:
            errors.append('Invalid library name: %s' % (lib_name))
        elif name == '_std':
          if valid_standard(value):
            std = value
        else:
          errors.append('Invalid GET option: ' + name)
      if len(errors) > 0:
        print '\n'.join(errors)
        sys.exit(1)
    elif o in ('-e', '--extra'):
      extra_args.append(a)

  if binary == '':
    print 'The shell binary has not been provided.'
    print 'Getting help: --help'
    sys.exit(1)
   
  shell_args = [binary]
  for l,v in lib_versions.items():
    if lib_exists(includes, l):
      new_args = ['-I', os.path.realpath('%s/%s/%s' % (includes, l, v))]
      if 'preshell' in binary:
        shell_args.extend(new_args)
      else:
        extra_args.extend(new_args)
    else:
      print 'Library not found: %s' % (l)
      sys.exit(1)
  if std != '':
    shell_args.extend(['--std', std])
  if len(extra_args) != 0:
    shell_args.append('--')
    shell_args.extend(extra_args)

  log(logfile, {'peer' : peer, 'cmd' : shell_args, 'url' : url})

  limit_memory(2048)

  try:
    with TempDir() as temp:
      os.chdir(temp.path)
      subprocess.call([binary] + shell_args)
  except OSError as e:
    print 'Error running the shell: %s' % (e)
    sys.exit(1)

if __name__ == '__main__':
  try:
    main()
  except SystemExit:
    raise
  except:
    print 'Uncaught exception'

